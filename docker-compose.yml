services:
  # Redis for Celery message broker
  redis:
    image: redis:7.2-alpine
    restart: always
    ports:
      - "16379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # PostgreSQL database
  airflow-db:
    image: postgres:13
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always

  # Airflow Apiserver using dedicated Dockerfile
  airflow-apiserver:
    build:
      context: .
      dockerfile: Dockerfile_apiserver
    env_file:
      - ./.env
    restart: always
    depends_on:
      redis:
        condition: service_healthy
      airflow-db:
        condition: service_healthy
    environment:
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__CELERY__BROKER_URL: redis://redis:6379/0
      AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@airflow-db:5432/airflow
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@airflow-db:5432/airflow
      AIRFLOW__WEBSERVER__DEFAULT_UI_TIMEZONE: UTC
      AIRFLOW__WEBSERVER__SHOW_TRIGGER_FORM_IF_NO_PARAMS: "True"
      
      _AIRFLOW_WWW_USER_USERNAME: airflow
      _AIRFLOW_WWW_USER_PASSWORD: airflow
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./include:/opt/airflow/include
      - ./plugins:/opt/airflow/plugins
      - ./projects:/opt/airflow/projects
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/"]
      interval: 30s
      timeout: 10s
      retries: 3
    command: >
      bash -c "airflow db migrate &&
               airflow connections create-default-connections &&
               airflow users create --username airflow --password airflow --firstname Air --lastname Flow --role Admin --email airflow@example.com || true &&
               airflow api-server"

  # Airflow Scheduler using worker Dockerfile
  airflow-scheduler:
    build:
      context: .
      dockerfile: Dockerfile_worker
    env_file:
      - ./.env
    depends_on:
      airflow-apiserver:
        condition: service_healthy
    restart: always
    environment:
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__CELERY__BROKER_URL: redis://redis:6379/0
      AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@airflow-db:5432/airflow
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@airflow-db:5432/airflow
      AIRFLOW__CORE__EXECUTION_API_SERVER_URL: http://airflow-apiserver:8080/execution/
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./include:/opt/airflow/include
      - ./plugins:/opt/airflow/plugins
      - ./projects:/opt/airflow/projects
    healthcheck:
      test: ["CMD-SHELL", "[ -f /opt/airflow/airflow-scheduler.pid ]"]
      interval: 30s
      timeout: 10s
      retries: 3
    command: scheduler
  
  # DAG Processor using dedicated Dockerfile
  airflow-dag-processor:
    build:
      context: .
      dockerfile: Dockerfile_dagprocessor
    env_file:
      - ./.env
    depends_on:
      airflow-apiserver:
        condition: service_healthy
    restart: always
    environment:
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__CELERY__BROKER_URL: redis://redis:6379/0
      AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@airflow-db:5432/airflow
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@airflow-db:5432/airflow
      AIRFLOW__CORE__EXECUTION_API_SERVER_URL: http://airflow-apiserver:8080/execution/
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./include:/opt/airflow/include
      - ./plugins:/opt/airflow/plugins
      - ./projects:/opt/airflow/projects
    command: dag-processor

  # Celery Workers using worker Dockerfile
  airflow-worker:
    build:
      context: .
      dockerfile: Dockerfile_worker
    env_file:
      - ./.env
    depends_on:
      airflow-apiserver:
        condition: service_healthy
    restart: always
    environment:
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__CELERY__BROKER_URL: redis://redis:6379/0
      AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@airflow-db:5432/airflow
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@airflow-db:5432/airflow
      AIRFLOW__CORE__EXECUTION_API_SERVER_URL: http://airflow-apiserver:8080/execution/
      # AIRFLOW__LOGGING__LOGGING_LEVEL: DEBUG
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./include:/opt/airflow/include
      - ./plugins:/opt/airflow/plugins
      - ./projects:/opt/airflow/projects
    healthcheck:
      test: ["CMD-SHELL", "celery --app airflow.providers.celery.executors.celery_executor inspect ping -d celery@$$HOSTNAME"]
      interval: 30s
      timeout: 10s
      retries: 3
    command: celery worker

  # Airflow Triggerer using worker Dockerfile
  airflow-triggerer:
    build:
      context: .
      dockerfile: Dockerfile_worker
    env_file:
      - ./.env
    depends_on:
      airflow-apiserver:
        condition: service_healthy
    restart: always
    environment:
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__CELERY__BROKER_URL: redis://redis:6379/0
      AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@airflow-db:5432/airflow
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@airflow-db:5432/airflow
      AIRFLOW__CORE__EXECUTION_API_SERVER_URL: http://airflow-apiserver:8080/execution/
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./include:/opt/airflow/include
      - ./plugins:/opt/airflow/plugins
      - ./projects:/opt/airflow/projects
    command: triggerer

volumes:
  postgres-db-volume:
  redis-data:
